res_status  = game_status(xt, objects, rad)
status      = res_status$status
terminal    = (status != 0)
if(trace){trajectories[,,k] = xt}
if(plt){plot_game(xt,objects,rad,c('red','black','green')[status+2])}
}
return(list(k = k, status = status,xt= xt,trajectories = trajectories))
}
model = function(X,theta,nodes)
{
# Infer dimensions:
N = dim(X)[1]
p = dim(X)[2]
q = 2
dims = c(p,nodes,q)
# Populate weight and bias matrices:
index = 1:(dims[1]*dims[2])
W1    = matrix(theta[index],dims[1],dims[2])
index = max(index)+1:(dims[2]*dims[3])
W2    = matrix(theta[index],dims[2],dims[3])
index = max(index)+1:(dims[3]*dims[4])
W3    = matrix(theta[index],dims[3],dims[4])
index = max(index)+1:(dims[2])
b1    = matrix(theta[index],dims[2],1)
index = max(index)+1:(dims[3])
b2    = matrix(theta[index],dims[3],1)
index = max(index)+1:(dims[4])
b3    = matrix(theta[index],dims[4],1)
ones    = matrix(1, 1, N)
a0      = t(X)
# Evaluate the updating equation in matrix form
a1 = tanh(t(W1)%*%a0 + b1%*%ones)
a2 = tanh(t(W2)%*%a1 + b2%*%ones)
a3 = tanh(t(W3)%*%a2 + b3%*%ones)
# Return a list of relevant objects:
return(list(a3 = t(a3)))
}
p     = 2
q     = 2
nodes = 3
npars = p*nodes+nodes*nodes+nodes*q+nodes+nodes+q
#npars
theta_rand = runif(npars,-1,1)
control = function(xt,pars)
{
res_model = model(xt,pars,rep(nodes,2))
return(res_model$a3)
}
#control(xt,theta_rand)
set.seed(2024)
J       =  50
objects = draw_objects(J)
xt      = draw_starts()
delt    = 0.025             # How big are the steps you can take?
rad     = 0.05              # How close to an object before you crash?
plot_game(xt,objects,rad,'black')
play_a_game = function(theta)
{
xt    = draw_starts()
res   = play(xt,delt,objects,rad,theta, trace = TRUE)
score = mean(res$status==1)
return(score)
}
# play_a_game(theta_rand)
library('GA')
obj = play_a_game
GA  = ga(type = 'real-valued',fitness = play_a_game,lower = rep(-10,npars),upper = rep(10,npars), popSize = 100,maxiter = 200,keepBest = TRUE)
#plot(GA)
theta_hat = GA@solution[1,]
#theta_hat
fps = 1
w = 800; h = 800
img = image_graph(width = w, height = h, res = 120)
win = c()
for(i in 1:100)
{
#objects = draw_objects(J)
xt_try    = draw_starts()
plot_game(xt_try,objects,rad,'black')
res_final = play(xt_try,delt,objects,rad,theta_hat,plt = FALSE,trace = TRUE)
#print(typeof(res_final$trajectories))
trajs = na.omit(res_final$trajectories)
lines(trajs[, 2,]~trajs[, 1, ])
win[i] = (res_final$status==1)
}
propWins = data.frame("Proportion of successful navigations" = mean(win)*100)
kable(propWins)
img2 = image_graph(width = w, height = h, res = 120)
winNewObjs = c()
for(i in 1:100)
{
objects = draw_objects(J)
xt_try    = draw_starts()
plot_game(xt_try,objects,rad,'black')
res_final = play(xt_try,delt,objects,rad,theta_hat,plt = FALSE,trace = TRUE)
#print(typeof(res_final$trajectories))
trajs = na.omit(res_final$trajectories)
lines(trajs[, 2,]~trajs[, 1, ])
winNewObjs[i] = (res_final$status==1)
}
propNewWins = data.frame("Proportion of successful navigations" = mean(winNewObjs))
kable(propNewWins)
S = matrix(0,9,8)
# Row Sums:
S[1:3,1] = 1
S[4:6,2] = 1
S[7:9,3] = 1
# Col Sums:
S[c(1:3)*3-2,4] = 1
S[c(1:3)*3-1,5] = 1
S[c(1:3)*3-0,6] = 1
# Diag Sums
S[c(1,5,9),7] = 1
S[c(3,5,7),8] = 1
S
rho = function(m,S)
{
m = matrix(m,ncol = 1)
player1  = any(t(m)%*%S==-3) # X
player2  = any(t(m)%*%S==+3) # O
m_1      = (m==-1) #m_
m_2      = (m==+1) #m+
tie      = sum((t(m_1)%*%S>0)*(t(m_2)%*%S>0))==8
winner   = c(-1,0,1)[c(player1,tie,player2)]
terminal = player1|tie|player2
ret      = list(terminal = terminal,winner = winner)
return(ret)
}
game_tree= function(m,k, currMoves = 0, maxMoves = 9)
{
g = c()
game_state = rho(m,S)
if(game_state$terminal)
{
g = c(g,game_state$winner)
return(g)
}
else if(currMoves == maxMoves)
{
g = c(g, 2)
return(g)
}
else{
Index = which(m == 0)
for(i in 1:length(Index))
{
x = m
x[Index[i]]=k
g = c(g,game_tree(x,-1*k, currMoves + 1, maxMoves))
}
return(g)
}
}
m = as.matrix(c(0,0,0,0,0,0,0,0,0))
res5 = game_tree(m,1, 0, 5)
n_g5  = 	length(res5)
Xwins5 = sum(res5==-1)
Draws5 = sum(res5== 0)
Owins5 = sum(res5==+1)
Unfinished5 = sum(res5==+2)
#Games5 = c(n_g5,Xwins5,Draws5,Owins5, Unfinished5)
games5 = data.frame("Number of moves" = 5, "Number of games" = n_g5, "X wins" = Xwins5, "O wins" = Owins5, "Draws" = Draws5)
res8 = game_tree(m,1, 0, 8)
n_g8  = 	length(res8)
Xwins8 = sum(res8==-1)
Draws8 = sum(res8== 0)
Owins8 = sum(res8==+1)
Unfinished8 = sum(res8==+2)
#Games8 = c(n_g8,Xwins8,Draws8,Owins8, Unfinished8)
games8 = data.frame("Number of moves" = 8, "Number of games" = n_g5, "X wins" = Xwins5, "O wins" = Owins5, "Draws" = Draws5)
res9 = game_tree(m,1, 0, 9)
n_g9  = 	length(res9)
Xwins9 = sum(res9==-1)
Draws9 = sum(res9== 0)
Owins9 = sum(res9==+1)
Unfinished9 = sum(res9==+2)
CombinedFull = c(n_g9,Xwins9/n_g9,Draws9/n_g9,Owins9/n_g9, Unfinished9)
datQ2A = rbind(games5, games8)
kable(datQ2A)
game_tree= function(m,k, currMoves = 0, maxMoves = 9)
{
g = c()
game_state = rho(m,S)
if(game_state$terminal)
{
g = c(g,game_state$winner)
return(g)
}
else if(currMoves == maxMoves)
{
g = c(g, 2)
return(g)
}
else{
Index = which(m == 0)
for(i in 1:length(Index))
{
x = m
x[Index[i]]=k
g = c(g,game_tree(x,-1*k, currMoves + 1, maxMoves))
}
return(g)
}
}
m = as.matrix(c(0,0,0,0,0,0,0,0,0))
res5 = game_tree(m,1, 0, 5)
n_g5  = 	length(res5)
Xwins5 = sum(res5==-1)
Draws5 = sum(res5== 0)
Owins5 = sum(res5==+1)
Unfinished5 = sum(res5==+2)
#Games5 = c(n_g5,Xwins5,Draws5,Owins5, Unfinished5)
games5 = data.frame("Number of moves" = 5, "Number of games" = n_g5, "X wins" = Xwins5, "O wins" = Owins5, "Draws" = Draws5)
res8 = game_tree(m,1, 0, 8)
n_g8  = 	length(res8)
Xwins8 = sum(res8==-1)
Draws8 = sum(res8== 0)
Owins8 = sum(res8==+1)
Unfinished8 = sum(res8==+2)
#Games8 = c(n_g8,Xwins8,Draws8,Owins8, Unfinished8)
games8 = data.frame("Number of moves" = 8, "Number of games" = n_g8, "X wins" = Xwins8, "O wins" = Owins8, "Draws" = Draws8)
res9 = game_tree(m,1, 0, 9)
n_g9  = 	length(res9)
Xwins9 = sum(res9==-1)
Draws9 = sum(res9== 0)
Owins9 = sum(res9==+1)
Unfinished9 = sum(res9==+2)
CombinedFull = c(n_g9,Xwins9/n_g9,Draws9/n_g9,Owins9/n_g9, Unfinished9)
datQ2A = rbind(games5, games8)
kable(datQ2A)
mcts = function(m, k, alpha)
{
g = c()
game_state = rho(m,S)
randAlpha = runif(1, 0, 1)
if(game_state$terminal)
{
g = c(g,game_state$winner)
return(g)
}
else
{
if (randAlpha <= alpha)
{
Index = which(m == 0)
for(i in 1:length(Index))
{
x = m
x[Index[i]]=k
g = c(g,mcts(x,-1*k, alpha))
}
return(g)
}
else
{
g = c(g,2)
return(g)
}
}
}
m = as.matrix(c(1,1,0,0,0,0,0,0,-1))
resMCTS = mcts(m,-1, 0.95)
n_gMCTS  = 	length(resMCTS)
XwinsMCTS = sum(resMCTS==-1)
DrawsMCTS = sum(resMCTS== 0)
OwinsMCTS = sum(resMCTS==+1)
UnfinishedMCTS = sum(resMCTS==+2)
MCTS = c(n_gMCTS,XwinsMCTS,DrawsMCTS,OwinsMCTS, UnfinishedMCTS)
mcts = function(m, k, alpha)
{
g = c()
game_state = rho(m,S)
randAlpha = runif(1, 0, 1)
if(game_state$terminal)
{
g = c(g,game_state$winner)
return(g)
}
else
{
if (randAlpha <= alpha)
{
Index = which(m == 0)
for(i in 1:length(Index))
{
x = m
x[Index[i]]=k
g = c(g,mcts(x,-1*k, alpha))
}
return(g)
}
else
{
g = c(g,2)
return(g)
}
}
}
m = as.matrix(c(1,1,0,0,0,0,0,0,-1))
resMCTS = mcts(m,-1, 0.95)
n_gMCTS  = 	length(resMCTS)
XwinsMCTS = sum(resMCTS==-1)
DrawsMCTS = sum(resMCTS== 0)
OwinsMCTS = sum(resMCTS==+1)
UnfinishedMCTS = sum(resMCTS==+2)
MCTS = c(n_gMCTS,XwinsMCTS,DrawsMCTS,OwinsMCTS, UnfinishedMCTS)
kable(MCTS)
kable(CombinedFull)
game_tree= function(m,k, currMoves = 0, maxMoves = 9)
{
g = c()
game_state = rho(m,S)
if(game_state$terminal)
{
g = c(g,game_state$winner)
return(g)
}
else if(currMoves == maxMoves)
{
g = c(g, 2)
return(g)
}
else{
Index = which(m == 0)
for(i in 1:length(Index))
{
x = m
x[Index[i]]=k
g = c(g,game_tree(x,-1*k, currMoves + 1, maxMoves))
}
return(g)
}
}
m = as.matrix(c(0,0,0,0,0,0,0,0,0))
res5 = game_tree(m,1, 0, 5)
n_g5  = 	length(res5)
Xwins5 = sum(res5==-1)
Draws5 = sum(res5== 0)
Owins5 = sum(res5==+1)
Unfinished5 = sum(res5==+2)
#Games5 = c(n_g5,Xwins5,Draws5,Owins5, Unfinished5)
games5 = data.frame("Number of moves" = 5, "Number of games" = n_g5, "X wins" = Xwins5, "O wins" = Owins5, "Draws" = Draws5)
res8 = game_tree(m,1, 0, 8)
n_g8  = 	length(res8)
Xwins8 = sum(res8==-1)
Draws8 = sum(res8== 0)
Owins8 = sum(res8==+1)
Unfinished8 = sum(res8==+2)
#Games8 = c(n_g8,Xwins8,Draws8,Owins8, Unfinished8)
games8 = data.frame("Number of moves" = 8, "Number of games" = n_g8, "X wins" = Xwins8, "O wins" = Owins8, "Draws" = Draws8)
res9 = game_tree(m,1, 0, 9)
n_g9  = 	length(res9)
Xwins9 = sum(res9==-1)
Draws9 = sum(res9== 0)
Owins9 = sum(res9==+1)
Unfinished9 = sum(res9==+2)
CombinedFull = c(n_g9,Xwins9,Draws9,Owins9, Unfinished9)
CombinedFullWinProb = c(Xwins9/n_g9,Draws9/n_g9,Owins9/n_g9)
datQ2A = rbind(games5, games8)
kable(datQ2A)
mcts = function(m, k, alpha)
{
g = c()
game_state = rho(m,S)
randAlpha = runif(1, 0, 1)
if(game_state$terminal)
{
g = c(g,game_state$winner)
return(g)
}
else
{
if (randAlpha <= alpha)
{
Index = which(m == 0)
for(i in 1:length(Index))
{
x = m
x[Index[i]]=k
g = c(g,mcts(x,-1*k, alpha))
}
return(g)
}
else
{
g = c(g,2)
return(g)
}
}
}
m = as.matrix(c(1,1,0,0,0,0,0,0,-1))
resMCTS = mcts(m,-1, 0.95)
n_gMCTS  = 	length(resMCTS)
XwinsMCTS = sum(resMCTS==-1)
DrawsMCTS = sum(resMCTS== 0)
OwinsMCTS = sum(resMCTS==+1)
UnfinishedMCTS = sum(resMCTS==+2)
MCTS = c(n_gMCTS,XwinsMCTS,DrawsMCTS,OwinsMCTS, UnfinishedMCTS)
MCTSWinProb = c(XwinsMCTS/n_gMCTS,DrawsMCTS/n_gMCTS,OwinsMCTS/n_gMCTS)
kable(MCTS)
kable(CombinedFull)
m = as.matrix(c(1,1,-1,0,0,0,0,0,-1))
df90 = data.frame()
df70 = data.frame()
for(i in 1:100)
{
resMCTS90 = mcts(m,1, 0.9)
resMCTS70 = mcts(m,1, 0.7)
n_gMCTS90  = 	length(resMCTS90)
XwinsMCTS90 = sum(resMCTS90==-1)
DrawsMCTS90 = sum(resMCTS90== 0)
OwinsMCTS90 = sum(resMCTS90==+1)
UnfinishedMCTS90 = sum(resMCTS==+2)
Combined90 = c(n_gMCTS90,XwinsMCTS90/n_gMCTS90,DrawsMCTS90/n_gMCTS90,OwinsMCTS90/n_gMCTS90, UnfinishedMCTS90)
n_gMCTS70  = 	length(resMCTS70)
XwinsMCTS70 = sum(resMCTS70==-1)
DrawsMCTS70 = sum(resMCTS70== 0)
OwinsMCTS70 = sum(resMCTS70==+1)
UnfinishedMCTS70 = sum(resMCTS70==+2)
Combined70 = c(n_gMCTS70,XwinsMCTS70/n_gMCTS70,DrawsMCTS70/n_gMCTS70,OwinsMCTS70/n_gMCTS70, UnfinishedMCTS70)
df90 = rbind(df90, Combined90)
df70 = rbind(df70, Combined70)
}
colnames(df90) = c("Games", "Xwins%", "Ties%", "Owins%", "Incomplete")
colnames(df70) = c("Games", "Xwins%", "Ties%", "Owins%", "Incomplete")
boxplot(df90[, 2:4])
points(c(CombinedFull[2], CombinedFull[3], CombinedFull[4]), pch = "*", col = "red", cex = 3)
boxplot(df70[, 2:4])
points(c(CombinedFull[2], CombinedFull[3], CombinedFull[4]), pch = "*", col = "red", cex = 3)
mcts_minBranch = function(m, k, alpha, currMoves, minBranch)
{
g = c()
game_state = rho(m,S)
randAlpha = runif(1, 0, 1)
if(game_state$terminal)
{
g = c(g,game_state$winner)
return(g)
}
else
{
if (currMoves <= minBranch)
{
Index = which(m == 0)
for(i in 1:length(Index))
{
x = m
x[Index[i]]=k
g = c(g,mcts_minBranch(x,-1*k, alpha, currMoves + 1, minBranch))
}
return(g)
}
else
{
if (randAlpha <= alpha)
{
Index = which(m == 0)
for(i in 1:length(Index))
{
x = m
x[Index[i]]=k
g = c(g,mcts_minBranch(x,-1*k, alpha, currMoves + 1, minBranch))
}
return(g)
}
else
{
g = c(g,2)
return(g)
}
}
}
}
# m = as.matrix(c(1,1,0,0,0,0,0,0,-1))
#
# resMCTS_Branch = mcts_minBranch(m,-1, 0.95, 3, 9)
# n_gMCTS_Branch  = 	length(resMCTS_Branch)
# XwinsMCTS_Branch = sum(resMCTS_Branch==-1)
# DrawsMCTS_Branch = sum(resMCTS_Branch== 0)
# OwinsMCTS_Branch = sum(resMCTS_Branch==+1)
# UnfinishedMCTS_Branch = sum(resMCTS_Branch==+2)
# c(n_gMCTS_Branch,XwinsMCTS_Branch,DrawsMCTS_Branch,OwinsMCTS_Branch, UnfinishedMCTS_Branch)
m = as.matrix(c(1,1,-1,0,0,0,0,0,-1))
df90_Branch_new = data.frame()
df70_Branch_new = data.frame()
for(i in 1:100)
{
resMCTS90_new = mcts_minBranch(m,1, 0.9, 4, 7)
resMCTS70_new = mcts_minBranch(m,1, 0.7, 4, 7)
n_gMCTS90_new  = 	length(resMCTS90_new)
XwinsMCTS90_new = sum(resMCTS90_new==-1)
DrawsMCTS90_new = sum(resMCTS90_new== 0)
OwinsMCTS90_new = sum(resMCTS90_new==+1)
UnfinishedMCTS90_new = sum(resMCTS90_new==+2)
Combined90_new = c(n_gMCTS90_new,XwinsMCTS90_new/n_gMCTS90_new,
DrawsMCTS90_new/n_gMCTS90_new,OwinsMCTS90_new/n_gMCTS90_new, UnfinishedMCTS90_new)
n_gMCTS70_new  = 	length(resMCTS70_new)
XwinsMCTS70_new = sum(resMCTS70_new==-1)
DrawsMCTS70_new = sum(resMCTS70_new== 0)
OwinsMCTS70_new = sum(resMCTS70_new==+1)
UnfinishedMCTS70_new = sum(resMCTS70_new==+2)
Combined70_new = c(n_gMCTS70_new,XwinsMCTS70_new/n_gMCTS70_new,
DrawsMCTS70_new/n_gMCTS70_new,OwinsMCTS70_new/n_gMCTS70_new, UnfinishedMCTS70_new)
df90_Branch_new = rbind(df90_Branch_new, Combined90_new)
df70_Branch_new = rbind(df70_Branch_new, Combined70_new)
}
colnames(df90_Branch_new) = c("Games", "Xwins%", "Ties%", "Owins%", "Incomplete")
colnames(df70_Branch_new) = c("Games", "Xwins%", "Ties%", "Owins%", "Incomplete")
boxplot(df90_Branch_new[, 2:4], ylim = c(0, 1))
points(c(CombinedFull[2], CombinedFull[3], CombinedFull[4]), pch = "*", col = "red", cex = 3)
boxplot(df70_Branch_new[, 2:4], ylim = c(0, 1))
points(c(CombinedFull[2], CombinedFull[3], CombinedFull[4]), pch = "*", col = "red", cex = 3)
